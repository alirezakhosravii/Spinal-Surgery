import tkinter as tk
from tkinter import ttk, messagebox
import pandas as pd
import joblib

class SVMPrognosisGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("SVM Prognosis Model GUI")

        # Load pre-fitted models and preprocessor
        self.short_term_model = joblib.load('svm_model_short_term_prognosis.pkl')
        self.long_term_model = joblib.load('svm_model_long_term_prognosis.pkl')
        self.preprocessor = joblib.load('data_preprocessor.pkl')  # Load the pre-fitted preprocessor

        # Setup GUI layout
        self.setup_layout()

    def setup_layout(self):
        # Labels and input fields for features
        self.inputs = {}
        features = [
            ('Age', 'scale', 20, 80),
            ('BMI', 'scale', 18, 35),
            ('Gender', 'combo', ['Male', 'Female']),
            ('Spinal_Condition', 'combo', ['Degenerative Disc Disease', 'Spinal Stenosis', 'Scoliosis']),
            ('Surgical_Technique', 'combo', ['PLIF', 'ALIF', 'TLIF']),
            ('Surgical_Complications', 'check'),
            ('Infection_Risk', 'check'),
            ('Postoperative_Pain_Level', 'scale', 0, 10),
            ('Patient_Satisfaction', 'scale', 1, 10),
            ('Comorbidity', 'combo', ['None', 'Diabetes', 'Cardiovascular Disease', 'Respiratory Disease', 'Obesity', 'Chronic Kidney Disease', 'Autoimmune Disorders', 'Mental Health Disorders'])
        ]

        for i, (feature, input_type, *args) in enumerate(features):
            label = ttk.Label(self.root, text=feature)
            label.grid(row=i, column=0, padx=10, pady=5, sticky="w")

            if input_type == 'combo':
                self.inputs[feature] = ttk.Combobox(self.root, values=args[0], state="readonly")
                self.inputs[feature].set(args[0][0])  # Set default value
            elif input_type == 'scale':
                self.inputs[feature] = tk.Scale(self.root, from_=args[0], to=args[1], orient=tk.HORIZONTAL)
                self.inputs[feature].set((args[0] + args[1]) / 2)  # Set default value
            elif input_type == 'check':
                self.inputs[feature] = tk.IntVar()
                check = ttk.Checkbutton(self.root, variable=self.inputs[feature])
                check.grid(row=i, column=1, padx=10, pady=5)
                continue  # Skip the next line for checkbuttons

            self.inputs[feature].grid(row=i, column=1, padx=10, pady=5)

        predict_btn = ttk.Button(self.root, text="Predict Prognosis", command=self.predict_prognosis)
        predict_btn.grid(row=len(features), column=0, columnspan=2, pady=10)

    def predict_prognosis(self):
        # Collect data from inputs
        data = {feature: [self.get_input_value(feature)] for feature in self.inputs}
        df = pd.DataFrame(data)

        # Apply preprocessing
        X = self.preprocessor.transform(df)

        # Make predictions
        short_term_pred = self.short_term_model.predict(X)[0]
        long_term_pred = self.long_term_model.predict(X)[0]

        # Display results
        messagebox.showinfo("Prediction Results", f"Short Term Prognosis: {short_term_pred}\nLong Term Prognosis: {long_term_pred}")

    def get_input_value(self, feature):
        input_widget = self.inputs[feature]
        if isinstance(input_widget, ttk.Combobox):
            return input_widget.get()
        elif isinstance(input_widget, tk.Scale):
            return input_widget.get()
        elif isinstance(input_widget, tk.IntVar):
            return input_widget.get()

if __name__ == "__main__":
    root = tk.Tk()
    gui = SVMPrognosisGUI(root)
    root.mainloop()
